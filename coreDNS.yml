how to configure and use CoreDNS
ChatGPT
Configuring and using CoreDNS in Kubernetes involves deploying CoreDNS as the cluster's DNS resolver and configuring it to handle DNS queries for your Kubernetes services. Below are the general steps to configure and use CoreDNS in a Kubernetes cluster:

Deploy CoreDNS:

You can deploy CoreDNS using a Kubernetes manifest or a Helm chart. Here's an example of deploying CoreDNS using a Kubernetes manifest:

yaml
Copy code
# coredns.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: coredns
  namespace: kube-system
data:
  Corefile: |
    .:53 {
        errors
        health
        kubernetes cluster.local in-addr.arpa ip6.arpa {
          pods insecure
          upstream
          fallthrough in-addr.arpa ip6.arpa
        }
        prometheus :9153
        forward . /etc/resolv.conf
        cache 30
        loop
        reload
        loadbalance
    }
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: coredns
  namespace: kube-system
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: coredns
rules:
- apiGroups:
    - ""
  resources:
    - endpoints
    - services
    - pods
  verbs:
    - list
    - watch
- apiGroups:
    - ""
  resources:
    - nodes
  verbs:
    - get
- apiGroups:
    - ""
  resources:
    - nodes/status
  verbs:
    - get
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: coredns
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: coredns
subjects:
- kind: ServiceAccount
  name: coredns
  namespace: kube-system
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: coredns
  namespace: kube-system
spec:
  replicas: 2
  selector:
    matchLabels:
      k8s-app: coredns
  template:
    metadata:
      labels:
        k8s-app: coredns
    spec:
      serviceAccountName: coredns
      containers:
      - name: coredns
        image: k8s.gcr.io/coredns:1.8.4
        resources:
          limits:
            memory: 170Mi
          requests:
            cpu: 100m
            memory: 70Mi
        args: [ "-conf", "/etc/coredns/Corefile" ]
        volumeMounts:
        - name: config-volume
          mountPath: /etc/coredns
          readOnly: true
      volumes:
      - name: config-volume
        configMap:
          name: coredns
Save the above manifest in a file named coredns.yaml, then apply it to your cluster using kubectl apply -f coredns.yaml.

Verify CoreDNS Deployment:

After deploying CoreDNS, verify that it is running correctly by checking the CoreDNS pods' status in the kube-system namespace:

bash
Copy code
kubectl get pods -n kube-system -l k8s-app=coredns
Ensure that the CoreDNS pods are in the Running state.

Update Kubernetes DNS Configuration:

Once CoreDNS is deployed and running, you need to update Kubernetes' DNS configuration to use CoreDNS as the DNS resolver. By default, Kubernetes uses kube-dns as its DNS resolver. To update it to use CoreDNS, edit the kubelet configuration on each node to point to CoreDNS. Edit the --cluster-dns and --cluster-domain flags in the kubelet configuration file (/etc/systemd/system/kubelet.service.d/10-kubeadm.conf or /etc/default/kubelet) to specify CoreDNS's service IP and the DNS domain.

For example:

bash
Copy code
KUBELET_ARGS="--cluster-dns=10.96.0.10 --cluster-domain=cluster.local"
Restart the kubelet service to apply the changes.

Test DNS Resolution:

After configuring CoreDNS, test DNS resolution within your Kubernetes cluster by querying a service's DNS name:

bash
Copy code
kubectl exec -it <pod-name> -- nslookup <service-name>
Replace <pod-name> with the name of a pod within the cluster, and <service-name> with the name of a service deployed in the cluster.

Additional Configuration:

CoreDNS's configuration can be customized further based on your requirements. You can modify the Corefile in the ConfigMap coredns to add or adjust DNS rules, such as DNS forwarding, caching, logging, and more.

These steps outline how to configure and use CoreDNS as the DNS resolver in a Kubernetes cluster. Adjustments may be needed based on your specific environment and requirements.